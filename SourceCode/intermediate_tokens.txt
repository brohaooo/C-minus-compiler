INT | int
ID | n
SEMI | ;
INT | int
ID | p
LSQUARE | [
INT_NUM | 12
RSQUARE | ]
SEMI | ;
INT | int
ID | r
SEMI | ;
INT | int
ID | d
SEMI | ;
INT | int
ID | i
SEMI | ;
INT | int
ID | x
SEMI | ;
INT | int
ID | j
SEMI | ;
INT | int
ID | base
SEMI | ;
INT | int
ID | e
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 0
RSQUARE | ]
ASSIGN | =
INT_NUM | 2
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 1
RSQUARE | ]
ASSIGN | =
INT_NUM | 3
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 2
RSQUARE | ]
ASSIGN | =
INT_NUM | 5
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 3
RSQUARE | ]
ASSIGN | =
INT_NUM | 7
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 4
RSQUARE | ]
ASSIGN | =
INT_NUM | 11
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 5
RSQUARE | ]
ASSIGN | =
INT_NUM | 13
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 6
RSQUARE | ]
ASSIGN | =
INT_NUM | 17
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 7
RSQUARE | ]
ASSIGN | =
INT_NUM | 19
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 8
RSQUARE | ]
ASSIGN | =
INT_NUM | 23
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 9
RSQUARE | ]
ASSIGN | =
INT_NUM | 29
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 10
RSQUARE | ]
ASSIGN | =
INT_NUM | 31
SEMI | ;
ID | p
LSQUARE | [
INT_NUM | 11
RSQUARE | ]
ASSIGN | =
INT_NUM | 37
SEMI | ;
READ | scanf
LPAR | (
ID | n
RPAR | )
SEMI | ;
ID | r
ASSIGN | =
INT_NUM | 0
SEMI | ;
ID | i
ASSIGN | =
INT_NUM | 0
SEMI | ;
ID | d
ASSIGN | =
ID | n
MINUS | -
INT_NUM | 1
SEMI | ;
IF | if
LPAR | (
ID | n
LT | <
INT_NUM | 2
OROR | ||
LPAR | (
ID | n
GT | >
INT_NUM | 2
ANDAND | &&
LPAR | (
LPAR | (
ID | n
AND_OP | &
INT_NUM | 1
RPAR | )
EQ | ==
INT_NUM | 0
RPAR | )
RPAR | )
RPAR | )
LBRACE | {
WRITE | printf
LPAR | (
INT_NUM | 0
RPAR | )
SEMI | ;
RETURN | return
SEMI | ;
RBRACE | }
WHILE | while
LPAR | (
LPAR | (
ID | d
AND_OP | &
INT_NUM | 1
RPAR | )
EQ | ==
INT_NUM | 0
RPAR | )
LBRACE | {
ID | d
ASSIGN | =
ID | d
SHR_OP | >>
INT_NUM | 1
SEMI | ;
ID | r
ASSIGN | =
ID | r
PLUS | +
INT_NUM | 1
SEMI | ;
RBRACE | }
WHILE | while
LPAR | (
ID | i
LT | <
INT_NUM | 12
RPAR | )
LBRACE | {
IF | if
LPAR | (
ID | n
EQ | ==
ID | p
LSQUARE | [
ID | i
RSQUARE | ]
RPAR | )
LBRACE | {
WRITE | printf
LPAR | (
INT_NUM | 1
RPAR | )
SEMI | ;
RETURN | return
SEMI | ;
RBRACE | }
ID | x
ASSIGN | =
INT_NUM | 1
SEMI | ;
ID | base
ASSIGN | =
ID | p
LSQUARE | [
ID | i
RSQUARE | ]
MINUS | -
ID | n
MUL_OP | *
LPAR | (
ID | p
LSQUARE | [
ID | i
RSQUARE | ]
DIV_OP | /
ID | n
RPAR | )
SEMI | ;
ID | e
ASSIGN | =
ID | d
SEMI | ;
WHILE | while
LPAR | (
ID | e
RPAR | )
LBRACE | {
IF | if
LPAR | (
ID | e
AND_OP | &
INT_NUM | 1
RPAR | )
LBRACE | {
ID | x
ASSIGN | =
ID | x
MUL_OP | *
ID | base
SEMI | ;
ID | x
ASSIGN | =
ID | x
MINUS | -
ID | n
MUL_OP | *
LPAR | (
ID | x
DIV_OP | /
ID | n
RPAR | )
SEMI | ;
RBRACE | }
ID | base
ASSIGN | =
ID | base
MUL_OP | *
ID | base
SEMI | ;
ID | base
ASSIGN | =
ID | base
MINUS | -
ID | n
MUL_OP | *
LPAR | (
ID | base
DIV_OP | /
ID | n
RPAR | )
SEMI | ;
ID | e
ASSIGN | =
ID | e
SHR_OP | >>
INT_NUM | 1
SEMI | ;
RBRACE | }
IF | if
LPAR | (
ID | x
NOTEQ | !=
INT_NUM | 1
ANDAND | &&
ID | x
NOTEQ | !=
ID | n
MINUS | -
INT_NUM | 1
RPAR | )
LBRACE | {
ID | j
ASSIGN | =
INT_NUM | 1
SEMI | ;
WHILE | while
LPAR | (
ID | j
LT | <
ID | r
ANDAND | &&
ID | x
NOTEQ | !=
ID | n
MINUS | -
INT_NUM | 1
RPAR | )
LBRACE | {
ID | j
ASSIGN | =
ID | j
PLUS | +
INT_NUM | 1
SEMI | ;
ID | x
ASSIGN | =
ID | x
MUL_OP | *
ID | x
SEMI | ;
ID | x
ASSIGN | =
ID | x
MINUS | -
ID | n
MUL_OP | *
LPAR | (
ID | x
DIV_OP | /
ID | n
RPAR | )
SEMI | ;
RBRACE | }
IF | if
LPAR | (
ID | x
NOTEQ | !=
ID | n
MINUS | -
INT_NUM | 1
RPAR | )
LBRACE | {
WRITE | printf
LPAR | (
INT_NUM | 0
RPAR | )
SEMI | ;
RETURN | return
SEMI | ;
RBRACE | }
RBRACE | }
ID | i
ASSIGN | =
ID | i
PLUS | +
INT_NUM | 1
SEMI | ;
RBRACE | }
WRITE | printf
LPAR | (
INT_NUM | 1
RPAR | )
SEMI | ;
RETURN | return
SEMI | ;
